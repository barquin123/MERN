const Workout=require("../models/workoutModel"),mongoose=require("mongoose"),getWorkouts=async(req,res)=>{const workouts=await Workout.find({}).sort({createdAt:-1});res.status(200).json(workouts)},getSingleWorkouts=async(req,res)=>{const{id:id}=req.params;if(!mongoose.Types.ObjectId.isValid(id))return res.status(404).json({error:"no such Workout"});const workout=await Workout.findById(id);if(!workout)return res.status(404).json({error:"did not exist workout"});res.status(200).json(workout)},createWorkout=async(req,res)=>{const{title:title,reps:reps,load:load}=req.body;let emptyFields=[];if(title||emptyFields.push("title"),load||emptyFields.push("load"),reps||emptyFields.push("reps"),emptyFields.length>0)return res.status(400).json({error:"Please fill in all fields",emptyFields:emptyFields});try{const workout=await Workout.create({title:title,reps:reps,load:load});res.status(200).json(workout)}catch(error){res.status(400).json({error:error.message})}},deleteWorkout=async(req,res)=>{const{id:id}=req.params;if(!mongoose.Types.ObjectId.isValid(id))return res.status(404).json({error:"no such Workout"});const workout=await Workout.findOneAndDelete({_id:id});if(!workout)return res.status(400).json({error:"workout don't exist"});res.status(200).json(workout)},updateWorkout=async(req,res)=>{const{id:id}=req.params;if(!mongoose.Types.ObjectId.isValid(id))return res.status(404).json({error:"no such workout"});const workout=await Workout.findOneAndUpdate({_id:id},{...req.body});if(!workout)return res.status(400).json({error:"workout don't exist"});res.status(200).json(workout)};module.exports={createWorkout:createWorkout,getWorkouts:getWorkouts,getSingleWorkouts:getSingleWorkouts,deleteWorkout:deleteWorkout,updateWorkout:updateWorkout};